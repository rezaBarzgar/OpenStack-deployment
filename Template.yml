heat_template_version: 2015-04-30
parameters:
  cidr:
    type: string
    description: CIDR for subnet
  gateway:
    type: string
    description: Gateway for subnet
  subnet_start:
    type: string
    description: s for subnet
  subnet_end:
    type: string
    description: s for subnet
  db_ip:
    type: string
    description: s for subnet
  app_1:
    type: string
    description: s for subnet
  app_2:
    type: string
    description: s for subnet
  app_3:
    type: string
    description: s for subnet

resources:
  network:
    type: OS::Neutron::Net
    properties:
      admin_state_up: True
      name: auth_app
      port_security_enabled: True
      shared: False
  
  subnet:
    type: OS::Neutron::Subnet
    properties:
        cidr: { get_param: cidr }
        gateway_ip: { get_param: gateway }
        name: Cloudsubnet
        network_id: { get_resource: network }
        allocation_pools:
        - start: { get_param: subnet_start }
          end: { get_param: subnet_end }
  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: "public"

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet }
#--------------------------end of network--------------------------------------

  db_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Security Group for db, created with Heat
      name: db_group
  app_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Security Group for app, created with Heat
      name: app_group
  ssh_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Security Group for ssh, created with Heat
      name: ssh_group

  tcp_db_group:
    type: OS::Neutron::SecurityGroupRule
    properties:
      direction: ingress
      ethertype: IPv4
      port_range_min: 27017
      port_range_max: 27017
      protocol: tcp
      remote_ip_prefix: { get_param: cidr }
      security_group: { get_resource: db_group }

  ssh_rule_group:
      type: OS::Neutron::SecurityGroupRule
      properties:
        direction: ingress
        ethertype: IPv4
        port_range_min: 22
        port_range_max: 22
        protocol: tcp
        remote_ip_prefix: 0.0.0.0/0
        security_group: { get_resource: ssh_group }
  
  http_rule_group:
      type: OS::Neutron::SecurityGroupRule
      properties:
        direction: ingress
        ethertype: IPv4
        port_range_min: 80
        port_range_max: 80
        protocol: tcp
        remote_ip_prefix: { get_param: cidr }
        security_group: { get_resource: app_group }

  ping_rule:
      type: OS::Neutron::SecurityGroupRule
      properties:
        direction: ingress
        ethertype: IPv4
        protocol: icmp
        remote_ip_prefix: 0.0.0.0/0
        security_group: { get_resource: ssh_group }
  #--------------------------end of Security group--------------------------------------

  db_instance:
    type: OS::Nova::Server
    properties:
      availability_zone: nova
      flavor: db_flavor
      key_name: aio1
      image: database_snapshot
      name: database_instance
      networks: [{"network": { get_resource: network }, "fixed_ip": { get_param: db_ip }, "subnet": { get_resource: subnet } } ]
      security_groups: [{ get_resource: db_group } , { get_resource: ssh_group } ]

  # app_instance_group:
  #   type: OS::Heat::ResourceGroup
  #   properties:
  #     count: 3
  #     resource_def:
  #       type: OS::Nova::Server
  #       properties:
  #         availability_zone: nova
  #         flavor: app_flavor
  #         image: app_snapshot
  #         name: app_instance_%index%
  #         networks: [{"network": { get_resource: network }, "subnet": { get_resource: subnet } } ]
  #         security_groups: [{ get_resource: ssh_group } ]

  server1:
        type: OS::Nova::Server
        properties:
          availability_zone: nova
          flavor: app_flavor
          image: app_snapshot
          key_name: aio1
          name: app_instance_1
          networks: [{"network": { get_resource: network }, "fixed_ip": { get_param: app_1},"subnet": { get_resource: subnet } } ]
          security_groups: [{ get_resource: ssh_group } , { get_resource: app_group } ]
          
  server2:
        type: OS::Nova::Server
        properties:
          availability_zone: nova
          flavor: app_flavor
          image: app_snapshot
          key_name: aio1
          name: app_instance_2
          networks: [{"network": { get_resource: network }, "fixed_ip": { get_param: app_2},"subnet": { get_resource: subnet } } ]
          security_groups: [{ get_resource: ssh_group } , { get_resource: app_group } ]

  server3:
        type: OS::Nova::Server
        properties:
          availability_zone: nova
          flavor: app_flavor
          image: app_snapshot
          key_name: aio1
          name: app_instance_3
          networks: [{"network": { get_resource: network }, "fixed_ip": { get_param: app_3},"subnet": { get_resource: subnet } } ]
          security_groups: [{ get_resource: ssh_group } , { get_resource: app_group } ]

  loadbalancer:
    type: OS::Octavia::LoadBalancer
    properties:
      admin_state_up: True
      name: load_balancer
      vip_subnet: { get_resource: subnet }

  listner:
    type: OS::Octavia::Listener
    properties:
      admin_state_up: True
      connection_limit: -1
      loadbalancer: { get_resource: loadbalancer }
      name: listner
      protocol: HTTP
      protocol_port: 80
  
  pool:
    type: OS::Octavia::Pool
    properties:
      admin_state_up: True
      lb_algorithm: ROUND_ROBIN
      listener: { get_resource: listner }
      loadbalancer: { get_resource: loadbalancer }
      name: pool
      protocol: HTTP

  pool_member1:
    type: OS::Octavia::PoolMember
    properties:
      address: { get_param: app_1}
      admin_state_up: True
      pool: { get_resource: pool }
      protocol_port: 80
      subnet: { get_resource: subnet }
      weight: 1

  pool_member2:
    type: OS::Octavia::PoolMember
    properties:
      address: { get_param: app_2}
      admin_state_up: True
      pool: { get_resource: pool }
      protocol_port: 80
      subnet: { get_resource: subnet }
      weight: 1

  pool_member3:
    type: OS::Octavia::PoolMember
    properties:
      address: { get_param: app_3}
      admin_state_up: True
      pool: { get_resource: pool }
      protocol_port: 80
      subnet: { get_resource: subnet }
      weight: 1

  healthmonitor:
    type: OS::Octavia::HealthMonitor
    properties:
      admin_state_up: True
      delay: 5
      expected_codes: 200
      http_method: GET
      max_retries: 10
      pool: { get_resource: pool }
      timeout: 5
      type: HTTP
      url_path: /authentiq/v1/heartbeat

  # healthmonitor:
  #   type: OS::Octavia::HealthMonitor
  #   properties:
  #     admin_state_up: True
  #     delay: 5
  #     max_retries: 10
  #     pool: { get_resource: pool }
  #     timeout: 5
  #     type: PING

